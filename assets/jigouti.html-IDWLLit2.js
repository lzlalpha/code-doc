import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as c,c as a,e as n}from"./app-z800hHj-.js";const o={},s=n(`<p><strong>结构体</strong>（struct），可以看做是一系列称为成员元素的组合体。</p><p>可以看做是自定义的数据类型。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>本页描述的 <code>struct</code> 不同于 C 中 <code>struct</code>，在 C++ 中 <code>struct</code> 被扩展为类似 <code>class</code> 的类说明符。</p></div><h2 id="定义结构体" tabindex="-1"><a class="header-anchor" href="#定义结构体"><span>定义结构体</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> weight<span class="token punctuation">;</span>
  <span class="token keyword">int</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span> e<span class="token punctuation">[</span>array_length<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Object a<span class="token punctuation">;</span>
Object b<span class="token punctuation">,</span> B<span class="token punctuation">[</span>array_length<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中定义了一个名为 <code>Object</code> 的结构体，两个成员元素 <code>value, weight</code>，类型都为 <code>int</code>。</p><p>在 <code>}</code> 后，定义了数据类型为 <code>Object</code> 的常量 <code>a</code>，变量 <code>b</code>，变量 <code>tmp</code>，数组 <code>B</code>，指针 <code>c</code>。对于某种已经存在的类型，都可以使用这里的方法进行定义常量、变量、指针、数组等。</p><h2 id="访问-修改成员元素" tabindex="-1"><a class="header-anchor" href="#访问-修改成员元素"><span>访问/修改成员元素</span></a></h2><p>可以使用 <code>变量名.成员元素名</code> 进行访问。例如可以使用 <code>cout &lt;&lt; var.v</code> 来输出 <code>var</code> 的 <code>v</code> 成员。</p><p>结构体也可以用指针，可以使用 <code>指针名-&gt;成员元素名</code> 或者 使用 <code>(*指针名).成员元素名</code> 进行访问。例如使用 <code>(*ptr).v = tmp</code> 或者 <code>ptr-&gt;v = tmp</code> 可以将结构体指针 <code>ptr</code> 指向的结构体的成员元素 <code>v</code> 赋值为 <code>tmp</code>：。</p><h2 id="为什么需要结构体" tabindex="-1"><a class="header-anchor" href="#为什么需要结构体"><span>为什么需要结构体？</span></a></h2><p>首先，条条大路通罗马，可以不使用结构体达到相同的效果。但是结构体能够显式地将成员元素（在算法竞赛中通常是变量）捆绑在一起，如本例中的 <code>Object</code> 结构体，便将 <code>value,weight</code> 放在了一起（定义这个结构体的实际意义是表示一件物品的重量与价值）。这样的好处边是限制了成员元素的使用。<br> 想象一下，如果不使用结构体而且有两个数组 <code>value[], Value[]</code>，很容易写混淆。但如果使用结构体，能够减轻出现使用变量错误的几率。</p><p>并且不同的结构体（结构体类型，如 <code>Object</code> 这个结构体）或者不同的结构体变量（结构体的实例，如上方的 <code>e</code> 数组）可以拥有相同名字的成员元素（如 <code>tmp.value,b.value</code>），同名的成员元素相互独立（拥有独自的内存，比如说修改 <code>tmp.value</code> 不会影响 <code>b.value</code> 的值）。<br> 这样的好处是可以使用尽可能相同或者相近的变量去描述一个物品。比如说 <code>Object</code> 里有 <code>value</code> 这个成员变量；我们还可以定义一个 <code>Car</code> 结构体，同时也拥有 <code>value</code> 这个成员；如果不使用结构体，或许我们就需要定义 <code>valueOfObject[],valueOfCar[]</code> 等不同名称的数组来区分。</p>`,13),t=[s];function d(p,i){return c(),a("div",null,t)}const r=e(o,[["render",d],["__file","jigouti.html.vue"]]);export{r as default};
