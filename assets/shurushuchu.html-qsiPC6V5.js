import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as i,c as d,d as s,f as n,a as o,w as c,e as a}from"./app-HXMhQnGi.js";const l={},u=a(`<h2 id="cin-与-cout" tabindex="-1"><a class="header-anchor" href="#cin-与-cout"><span><code>cin</code> 与 <code>cout</code></span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>                          <span class="token comment">// 声明变量</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>                <span class="token comment">// 读入 x 和 y</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>  <span class="token comment">// 输出 y，换行，再输出 x</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token comment">// 结束主函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),r={class:"hint-container info"},k=s("p",{class:"hint-container-title"},"什么是变量？",-1),m=a(`<div class="hint-container info"><p class="hint-container-title">什么是 \`std\`？</p><p>std 是 C++ 标准库所使用的 <strong>命名空间</strong>。使用命名空间是为了避免重名。</p></div><h2 id="scanf-与-printf" tabindex="-1"><a class="header-anchor" href="#scanf-与-printf"><span><code>scanf</code> 与 <code>printf</code></span></a></h2><p><code>scanf</code> 与 <code>printf</code> 其实是 C 语言提供的函数。大多数情况下，它们的速度比 <code>cin</code> 和 <code>cout</code> 更快，并且能够方便地控制输入输出格式。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 读入 x 和 y</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n%d&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 y，换行，再输出 x</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中， <code>%d</code> 表示读入/输出的变量是一个有符号整型（ <code>int</code> 型）的变量。</p><p>类似地：</p><ol><li><code>%s</code> 表示字符串。</li><li><code>%c</code> 表示字符。</li><li><code>%lf</code> 表示双精度浮点数 (<code>double</code>)。</li><li><code>%lld</code> 表示长整型 (<code>long long</code>)。根据系统不同，也可能是 <code>%I64d</code>。</li><li><code>%u</code> 表示无符号整型 (<code>unsigned int</code>)。</li><li><code>%llu</code> 表示无符号长整型 (<code>unsigned long long</code>)，也可能是 <code>%I64u</code>。</li></ol><p>除了类型标识符以外，还有一些控制格式的方式。许多都不常用，选取两个常用的列举如下：</p><ol><li><code>%1d</code> 表示长度为 1 的整型。在读入时，即使没有空格也可以逐位读入数字。在输出时，若指定的长度大于数字的位数，就会在数字前用空格填充。若指定的长度小于数字的位数，就没有效果。</li><li><code>%.6lf</code>，用于输出，保留六位小数。</li></ol><p>这两种运算符的相应地方都可以填入其他数字，例如 <code>%.3lf</code> 表示保留三位小数。</p><div class="hint-container info"><p class="hint-container-title">「双精度浮点数」，「长整型」是什么</p><p>这些表示变量的类型。</p></div>`,11),v={class:"hint-container info"},h=s("p",{class:"hint-container-title"},"为什么 `scanf` 中有 `&` 运算符？",-1),f=s("code",null,"&",-1),g=a('<div class="hint-container info"><p class="hint-container-title">什么是 \\n？</p><p><code>\\n</code> 是一种 <strong>转义字符</strong>，表示换行。</p><p>转义字符用来表示一些无法直接输入的字符，如由于字符串字面量中无法换行而无法直接输入的换行符，由于有特殊含义而无法输入的引号，由于表示转义字符而无法输入的反斜杠。</p><p>常用的转义字符有：</p><ol><li><code>\\t</code> 表示制表符。</li><li><code>\\\\</code> 表示 <code>\\</code>。</li><li><code>\\&quot;</code> 表示 <code>&quot;</code>。</li><li><code>\\0</code> 表示空字符，用来表示 C 风格字符串的结尾。</li><li><code>\\r</code> 表示回车。Linux 中换行符为 <code>\\n</code>，Windows 中换行符为 <code>\\r\\n</code>。在 OI 中，如果输出需要换行，使用 <code>\\n</code> 即可。但读入时，如果使用逐字符读入，可能会由于换行符造成一些问题，需要注意。例如，<code>gets</code> 将 <code>\\n</code> 作为字符串结尾，这时候如果换行符是 <code>\\r\\n</code>，<code>\\r</code> 就会留在字符串结尾。</li><li>特殊地，<code>%%</code> 表示 <code>%</code>，只能用在 <code>printf</code> 或 <code>scanf</code> 中，在其他字符串字面量中只需要简单使用 <code>%</code> 就好了。</li></ol></div><div class="hint-container info"><p class="hint-container-title">什么是字面量？</p><p>「字面量」是在代码里直接作为一个值的程序段，例如 <code>3</code> 就是一个 <code>int</code> 字面量，<code>&#39;c&#39;</code> 就是一个 char 字面量。我们上面写的程序中的 <code>&quot;hello world&quot;</code> 也是一个字符串字面量。</p><p>不加解释、毫无来由的字面量又被称为「魔术数」（magic number），如果代码需要被人阅读的话，这是一种十分不被推荐的行为。</p></div>',2);function _(b,y){const e=p("RouterLink");return i(),d("div",null,[u,s("div",r,[k,s("p",null,[n("可以参考 "),o(e,{to:"/cpp/1jichuyufa/bianliang.html"},{default:c(()=>[n("变量")]),_:1}),n(" 页面。")])]),m,s("div",v,[h,s("p",null,[n("在这里，"),f,n(" 实际上是取址运算符，返回的是变量在内存中的地址。而 scanf 接收的参数就是变量的地址。具体可能要在 "),o(e,{to:"/cpp/1jichuyufa/pointer.html"},{default:c(()=>[n("指针")]),_:1}),n(" 才能完全清楚地说明，现在只需要记下来就好了。")])]),g])}const q=t(l,[["render",_],["__file","shurushuchu.html.vue"]]);export{q as default};
