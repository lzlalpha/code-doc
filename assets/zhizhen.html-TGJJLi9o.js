import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as p}from"./app-AIxYR4OL.js";const e={},t=p(`<h2 id="变量的地址、指针" tabindex="-1"><a class="header-anchor" href="#变量的地址、指针"><span>变量的地址、指针</span></a></h2><p>在程序中，我们的数据都有其存储的地址。在程序每次的实际运行过程中，变量在物理内存中的存储位置不尽相同。不过，我们仍能够在编程时，通过一定的语句，来取得数据在内存中的地址。</p><p>地址也是数据。存放地址所用的变量类型有一个特殊的名字，叫做「指针变量」，有时也简称做「指针」。</p><h2 id="指针的声明与使用" tabindex="-1"><a class="header-anchor" href="#指针的声明与使用"><span>指针的声明与使用</span></a></h2><p>C/C++ 中，指针变量的类型为类型名后加上一个星号 <code>*</code>。比如，<code>int</code> 类型的指针变量的类型名即为 <code>int*</code>。</p><p>我们可以使用 <code>&amp;</code> 符号取得一个变量的地址。</p><p>要想访问指针变量地址所对应的空间（又称指针所 <strong>指向</strong> 的空间），需要对指针变量进行 <strong>解引用</strong>（dereference），使用 <code>*</code> 符号。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment">// a: 123</span>
  <span class="token keyword">int</span><span class="token operator">*</span> pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
  <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>  <span class="token comment">// a: 321</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对结构体变量也是类似。如果要访问指针指向的结构中的成员，需要先对指针进行解引用，再使用 <code>.</code> 成员关系运算符。不过，更推荐使用「箭头」运算符 <code>-&gt;</code> 这一更简便的写法。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">ThreeInt</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token keyword">int</span> b<span class="token punctuation">;</span>
  <span class="token keyword">int</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ThreeInt x<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> y<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  ThreeInt<span class="token operator">*</span> px <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>
  <span class="token punctuation">(</span><span class="token operator">*</span>px<span class="token punctuation">)</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token comment">// x: {6,7,8}</span>
  <span class="token punctuation">(</span><span class="token operator">*</span>px<span class="token punctuation">)</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">// x: {4,7,8}</span>
  px<span class="token operator">-&gt;</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">// x: {4,5,8}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针的偏移" tabindex="-1"><a class="header-anchor" href="#指针的偏移"><span>指针的偏移</span></a></h2><p>指针变量也可以 <strong>和整数</strong> 进行加减操作。对于 <code>int</code> 型指针，每加 1（递增 1），其指向的地址偏移 32 位（即 4 个字节）；若加 2，则指向的地址偏移 2 × 32 = 64 位。同理，对于 <code>char</code> 型指针，每次递增，其指向的地址偏移 8 位（即 1 个字节）。</p><h3 id="使用指针偏移访问数组" tabindex="-1"><a class="header-anchor" href="#使用指针偏移访问数组"><span>使用指针偏移访问数组</span></a></h3><p>我们前面说过，数组是一块连续的存储空间。而在 C/C++ 中，直接使用数组名，得到的是数组的起始地址。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token comment">// p 指向 a[0]</span>
  <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token comment">// a: [4, 2, 3]</span>
  p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// p 指向 a[1]</span>
  <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>      <span class="token comment">// a: [4, 5, 3]</span>
  p<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment">// p 指向 a[2]</span>
  <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>      <span class="token comment">// a: [4, 5, 6]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当通过指针访问数组中的元素时，往往需要用到「指针的偏移」，换句话说，即通过一个基地址（数组起始的地址）加上偏移量来访问。</p><p>我们常用 <code>[]</code> 运算符来访问数组中某一指定偏移量处的元素。比如 <code>a[3]</code> 或者 <code>p[4]</code>。这种写法和对指针进行运算后再引用是等价的，即 <code>p[4]</code> 和 <code>*(p + 4)</code> 是等价的两种写法。</p>`,17),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","zhizhen.html.vue"]]);export{d as default};
