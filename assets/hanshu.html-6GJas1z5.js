import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-URoV-4DJ.js";const o={},p=e(`<h2 id="函数的声明" tabindex="-1"><a class="header-anchor" href="#函数的声明"><span>函数的声明</span></a></h2><p>编程中的函数（function）一般是若干语句的集合。我们也可以将其称作「<strong>子过程</strong>（subroutine）」。在编程中，如果有一些重复的过程，我们可以将其提取出来，形成一个函数。函数可以接收若干值，这叫做函数的参数。函数也可以返回某个值，这叫做函数的返回值。</p><p>声明一个函数，我们需要返回值类型、函数的名称，以及参数列表。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 返回值类型 int</span>
<span class="token comment">// 函数的名称 some_function</span>
<span class="token comment">// 参数列表 int, int</span>
<span class="token keyword">int</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上图，我们声明了一个名为 <code>some_function</code> 的函数，它需要接收两个 <code>int</code> 类型的参数，返回值类型也为 <code>int</code>。可以认为，这个函数将会对传入的两个整数进行一些操作，并且返回一个同样类型的结果。</p><h2 id="实现函数-编写函数的定义" tabindex="-1"><a class="header-anchor" href="#实现函数-编写函数的定义"><span>实现函数：编写函数的定义</span></a></h2><p>只有函数的声明（declaration）还不够，他只能让我们在调用时能够得知函数的 <strong>接口</strong> 类型（即接收什么数据、返回什么数据），但其缺乏具体的内部实现，也就是函数的 <strong>定义</strong>（definition）。我们可以在 <strong>声明之后的其他地方</strong> 编写代码 <strong>实现</strong>（implement）这个函数（也可以在另外的文件中实现，但是需要将分别编译后的文件在链接时一并给出）。</p><p>如果函数有返回值，则需要通过 <code>return</code> 语句，将值返回给调用方。函数一旦执行到 <code>return</code> 语句，则直接结束当前函数，不再执行后续的语句。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明</span>

<span class="token comment">/* some other code here... */</span>

<span class="token keyword">int</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 定义</span>
  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  result <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 这条语句不会被执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义时，我们给函数的参数列表的变量起了名字。这样，我们便可以在函数定义中使用这些变量了。</p><p>如果是同一个文件中，我们也可以直接将 <strong>声明和定义合并在一起</strong>，换句话说，也就是在声明时就完成定义。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果函数不需要有返回值，则将函数的返回值类型标为 <code>void</code>；如果函数不需要参数，则可以将参数列表置空。同样，无返回值的函数执行到 <code>return;</code> 语句也会结束执行。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello!\\n&quot;</span><span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello!\\n&quot;</span><span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello!\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello!\\n&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 这条语句不会被执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的调用" tabindex="-1"><a class="header-anchor" href="#函数的调用"><span>函数的调用</span></a></h2><p>和变量一样，函数需要先被声明，才能使用。使用函数的行为，叫做「调用（call）」。我们可以在任何函数内部调用其他函数，包括这个函数自身。函数调用自身的行为，称为 <strong>递归</strong>（recursion）。</p><p>在大多数语言中，调用函数的写法，是 <strong>函数名称加上一对括号</strong> <code>()</code>，如 <code>foo()</code>。如果函数需要参数，则我们将其需要的参数按顺序填写在括号中，以逗号间隔，如 <code>foo(1, 2)</code>。函数的调用也是一个表达式，<strong>函数的返回值</strong> 就是 <strong>表达式的值</strong>。</p><p>函数声明时候写出的参数，可以理解为在函数 <strong>当前次调用的内部</strong> 可以使用的变量，这些变量的值由调用处传入的值初始化。看下面这个例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* ... */</span>

<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ... */</span>

a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 调用前：a = 1, b = 1</span>
<span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 foo</span>
            <span class="token comment">// 调用后：a = 1, b = 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>foo(a, b)</code> 是一次对 <code>foo</code> 的调用。调用时，<code>foo</code> 中的 <code>x</code> 和 <code>y</code> 变量，分别由调用处 <code>a</code> 和 <code>b</code> 的值初始化。因此，在 <code>foo</code> 中对变量 <code>x</code> 和 <code>y</code> 的修改，<strong>并不会影响到调用处的变量的值</strong>。</p><p>如果我们需要在函数（子过程）中修改变量的值，则需要采用「传引用」的方式。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ... */</span>

a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 调用前：a = 1, b = 1</span>
<span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 foo</span>
            <span class="token comment">// 调用后：a = 2, b = 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，我们看到函数参数列表中的「<code>int</code>」后面添加了一个「<code>&amp;</code>（and 符号）」，这表示对于 <code>int</code> 类型的 <strong>引用</strong>（reference）。在调用 <code>foo</code> 时，调用处 <code>a</code> 和 <code>b</code> 变量分别初始化了 <code>foo</code> 中两个对 <code>int</code> 类型的引用 <code>x</code> 和 <code>y</code>。在 <code>foo</code> 中的 <code>x</code> 和 <code>y</code>，可以理解为调用处 <code>a</code> 和 <code>b</code> 变量的「别名」，即 <code>foo</code> 中对 <code>x</code> 和 <code>y</code> 的操作，就是对调用处 <code>a</code> 和 <code>b</code> 的操作。</p><h2 id="main-函数" tabindex="-1"><a class="header-anchor" href="#main-函数"><span><code>main</code> 函数</span></a></h2><p>特别的，每个 C/C++ 程序都需要有一个名为 <code>main</code> 的函数。任何程序都将从 <code>main</code> 函数开始运行。</p><blockquote><p><code>main</code> 函数也可以有参数，通过 <code>main</code> 函数的参数，我们可以获得外界传给这个程序的指令（也就是「命令行参数」），以便做出不同的反应。</p></blockquote><p>下面是一段调用了函数（子过程）的代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// hello_subroutine.cpp</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello!\\n&quot;</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello!\\n&quot;</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello!\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),t=[p];function c(l,i){return s(),a("div",null,t)}const r=n(o,[["render",c],["__file","hanshu.html.vue"]]);export{r as default};
