import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-HXMhQnGi.js";const t={},p=e(`<h2 id="文件的概念" tabindex="-1"><a class="header-anchor" href="#文件的概念"><span>文件的概念</span></a></h2><p>文件是根据特定的目的而收集在一起的有关数据的集合。C/C++ 把每一个文件都看成是一个有序的字节流，每个文件都是以 <strong>文件结束标志</strong>（EOF）结束，如果要操作某个文件，程序应该首先打开该文件，每当一个文件被打开后（请记得关闭打开的文件），该文件就和一个流关联起来，这里的流实际上是一个字节序列。</p><p>C/C++ 将文件分为文本文件和二进制文件。文本文件就是简单的文本文件（重点），另外二进制文件就是特殊格式的文件或者可执行代码文件等。</p><h2 id="文件的操作步骤" tabindex="-1"><a class="header-anchor" href="#文件的操作步骤"><span>文件的操作步骤</span></a></h2><p>1、打开文件，将文件指针指向文件，决定打开文件类型；<br> 2、对文件进行读、写操作（比赛中主要用到的操作，其他一些操作暂时不写）；<br> 3、在使用完文件后，关闭文件。</p><h2 id="freopen-函数" tabindex="-1"><a class="header-anchor" href="#freopen-函数"><span><code>freopen</code> 函数</span></a></h2><h3 id="函数简介" tabindex="-1"><a class="header-anchor" href="#函数简介"><span>函数简介</span></a></h3><p>函数用于将指定输入输出流以指定方式重定向到文件，包含于头文件 <code>stdio.h (cstdio)</code> 中，该函数可以在不改变代码原貌的情况下改变输入输出环境，但使用时应当保证流是可靠的。</p><p>函数主要有三种方式：读、写和附加。</p><h3 id="命令格式" tabindex="-1"><a class="header-anchor" href="#命令格式"><span>命令格式</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>FILE<span class="token operator">*</span> <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> mode<span class="token punctuation">,</span> FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明"><span>参数说明</span></a></h3><ul><li><code>filename</code>: 要打开的文件名</li><li><code>mode</code>: 文件打开的模式，表示文件访问的权限</li><li><code>stream</code>: 文件指针，通常使用标准文件流 (<code>stdin/stdout</code>) 或标准错误输出流 (<code>stderr</code>)</li><li>返回值：文件指针，指向被打开文件</li></ul><h3 id="文件打开格式-选读" tabindex="-1"><a class="header-anchor" href="#文件打开格式-选读"><span>文件打开格式（选读）</span></a></h3><ul><li><code>r</code>：以只读方式打开文件，文件必须存在，只允许读入数据 <strong>（常用）</strong></li><li><code>r+</code>：以读/写方式打开文件，文件必须存在，允许读/写数据</li><li><code>rb</code>：以只读方式打开二进制文件，文件必须存在，只允许读入数据</li><li><code>rb+</code>：以读/写方式打开二进制文件，文件必须存在，允许读/写数据</li><li><code>rt+</code>：以读/写方式打开文本文件，允许读/写数据</li><li><code>w</code>：以只写方式打开文件，文件不存在会新建文件，否则清空内容，只允许写入数据 <strong>（常用）</strong></li><li><code>w+</code>：以读/写方式打开文件，文件不存在将新建文件，否则清空内容，允许读/写数据</li><li><code>wb</code>：以只写方式打开二进制文件，文件不存在将会新建文件，否则清空内容，只允许写入数据</li><li><code>wb+</code>：以读/写方式打开二进制文件，文件不存在将新建文件，否则清空内容，允许读/写数据</li><li><code>a</code>：以只写方式打开文件，文件不存在将新建文件，写入数据将被附加在文件末尾（保留 EOF 符）</li><li><code>a+</code>：以读/写方式打开文件，文件不存在将新建文件，写入数据将被附加在文件末尾（不保留 EOF 符）</li><li><code>at+</code>：以读/写方式打开文本文件，写入数据将被附加在文件末尾</li><li><code>ab+</code>：以读/写方式打开二进制文件，写入数据将被附加在文件末尾</li></ul><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h3><p>读入文件内容：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;data.in&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// data.in 就是读取的文件名，要和可执行文件放在同一目录下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出到文件：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;data.out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// data.out 就是输出文件的文件名，和可执行文件在同一目录下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭标准输入/输出流</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">注</p><p><code>printf/scanf/cin/cout</code> 等函数默认使用 <code>stdin/stdout</code>，将 <code>stdin/stdout</code> 重定向后，这些函数将输入/输出到被定向的文件</p></div><h3 id="常用模板" tabindex="-1"><a class="header-anchor" href="#常用模板"><span>常用模板</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;data.in&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;data.out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/*
  中间的代码不需要改变，直接使用 cin 和 cout 即可
  */</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","wenjian.html.vue"]]);export{r as default};
